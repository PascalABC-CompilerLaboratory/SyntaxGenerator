<#alias constructor_params = take type, name with format '{0} {1}' from node_fields join by ', '#>

<#alias constructor_body = take name with format 'this._{0}={0};' from node_fields join by ';\r\n'#>

<#alias ref_fields_decl = take modifiers, type, name with format '{0} {1} _{2} = new {1}();' from node_fields filter reference_type join by ';\r\n'#>

<#alias val_fields_decl = take modifiers, type, name with format '{0} {1} _{2};' from node_fields filter value_type join by ';\r\n'#>

<#alias properties = 
take type, name, description 
with format 
'///<summary>
///{2}
///</summary>
public {0} {1}
{
    get
	{
	    return _{1};
	}
	set
	{
		_{1}=value;
	}
}' 
from node_fields 
join by '\r\n'#>

<#alias wo_list_count_property = 
take value
with format 
'///<summary>
///Свойство для получения количества всех подузлов без элементов поля типа List
///</summary>
public override int subnodes_without_list_elements_count
{
    get
	{
	    return {0};
	}
}' 
from subnodes_without_list_elements_count
join by '\r\n'#>

<#alias subnodes_count_property = 
take value
with format 
'///<summary>
///Свойство для получения количества всех подузлов. Подузлом также считается каждый элемент поля типа List
///</summary>
public override int subnodes_count
{
    get
	{
	    return {0} + (idents == null ? 0 : idents.Count); //Проблема
	}
}'
from subnodes_without_list_elements_count
join by '\r\n'#>

		///<summary>
		///Свойство для получения количества всех подузлов. Подузлом также считается каждый элемент поля типа List
		///</summary>
		public override Int32 subnodes_count
		{
			get
			{
				return 0 + (idents == null ? 0 : idents.Count);
			}
		}

namespace name
{
    public partial class <#node_name#> : <#base_node_name#>
	{

		///<summary>
		///Конструктор без параметров.
		///</summary>
		public <#node_name#>()
		{

		}

		///<summary>
		///Конструктор с параметрами.
		///</summary>
		public <#node_name#>(<#constructor_params#>)
		{
			<#constructor_body#>
		}

		///<summary>
		///Конструктор с параметрами.
		///</summary>
		public <#node_name#>(<#constructor_params#>, SourceContext sc)
		{
			<#constructor_body#>
			source_context = sc;
		}

		<#ref_fields_decl#>
		<#val_fields_decl#>

		<#properties#>

		<#wo_list_count_property#>
		<#subnodes_count_property#>


		///<summary>
		///Индексатор для получения всех подузлов
		///</summary>
		public override syntax_tree_node this[Int32 ind]
		{
			get
			{
				if(subnodes_count == 0 || ind < 0 || ind > subnodes_count-1)
					throw new IndexOutOfRangeException();
				Int32 index_counter=ind - 0;
				if(idents != null)
				{
					if(index_counter < idents.Count)
					{
						return idents[index_counter];
					}
				}
				return null;
			}
			set
			{
				if(subnodes_count == 0 || ind < 0 || ind > subnodes_count-1)
					throw new IndexOutOfRangeException();
				Int32 index_counter=ind - 0;
				if(idents != null)
				{
					if(index_counter < idents.Count)
					{
						idents[index_counter]= (ident)value;
						return;
					}
				}
			}
		}
		///<summary>
		///Метод для обхода дерева посетителем
		///</summary>
		///<param name="visitor">Объект-посетитель.</param>
		///<returns>Return value is void</returns>
		public override void visit(IVisitor visitor)
		{
			visitor.visit(this);
		}

	}
}